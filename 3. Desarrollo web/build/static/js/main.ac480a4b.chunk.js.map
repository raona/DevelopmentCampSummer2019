{"version":3,"sources":["constants/carouselItemImages.ts","common/respiCarousel.tsx","home/home.tsx","common/respiTable.tsx","common/modalDialog/modalDialog.tsx","common/formGroup.tsx","services/cityService.ts","common/modalDialog/bodies/addPatientBody.tsx","services/patientService.ts","patients/patients.tsx","common/navbar/navbarItem.tsx","common/navbar/respiNavbar.tsx","constants/respiNavItems.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["carouselItemImages","src","className","alt","RespiCarousel","this","props","map","item","Item","React","Component","Home","style","marginBottom","display","rounded","height","verticalAlign","length","RespiTable","headers","rows","header","key","row","index","Object","values","column","toString","ModalDialog","onSaveClick","bodyRef","current","addedPatient","save","onClose","title","body","show","onHide","Header","closeButton","Title","Body","Footer","variant","onClick","FormGroup","labelText","Group","Label","children","PatientService","patientsImport","default","AddPatientBody","state","patient","Id","Name","Surname","Gender","GenderId","DateOfBirth","Date","toISOString","DateOfDecease","Smoker","CigarrettesDailyConsumption","City","CityId","cities","onNameChange","event","currentTarget","value","setState","onSurnameChange","onGenderChange","parseInt","selectedOptions","attributes","getNamedItem","onBirthDateChange","date","modifiers","dayPickerInput","onDeceaseDateChange","onSmokerChange","onDailyCigarrettesChange","onCityChange","CityService","getCities","Control","as","type","onChange","data-id","onDayChange","format","disabled","city","Patients","createRef","patients","showModal","onAddPatientRow","onModalDialogClose","lastId","Math","max","apply","push","getPatients","keys","ref","NavbarItem","navbarItem","Link","eventKey","RespiNavbar","handleNavBarSelect","respiNavItems","defaultActiveKey","bg","expand","Brand","Toggle","aria-controls","Collapse","id","onSelect","App","currentView","handleNavbarSelect","view","undefined","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac480a4b.chunk.js","sourcesContent":["import carouselItemImage from \"../entities/carouselItemImage\";\n\nconst carouselItemImages: carouselItemImage[] = [\n    {\n        src: 'http://www.stacks.es/documents/14771/27698/his_home.JPG?t=1401699848596',\n        className: 'd-block w-100',\n        alt: 'first-image'\n    }\n];\n\nexport default carouselItemImages;","import React from \"react\";\nimport Carousel from \"react-bootstrap/Carousel\";\nimport carouselItemImage from \"../entities/carouselItemImage\";\n\nexport interface CarouselItemProps {\n    carouselItemImages: carouselItemImage[];\n}\n\nexport default class RespiCarousel extends React.Component<CarouselItemProps, {}> {\n    public render() {\n        let { carouselItemImages } = this.props;\n\n        return (\n            <Carousel>\n                {\n                    carouselItemImages.map(item => {\n                        return <Carousel.Item>\n                            <img className={item.className} src={item.src} alt={item.alt} />\n                        </Carousel.Item>\n                    })\n                }\n            </Carousel>\n        );\n    }\n}","import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Image from 'react-bootstrap/Image';\nimport carouselItemImages from '../constants/carouselItemImages';\nimport RespiCarousel from '../common/respiCarousel';\n\nexport default class Home extends React.Component {\n    public render() {\n        return (\n            <>\n                <Jumbotron style={{ marginBottom: '0px' }}>\n                    <Image style={{ display: 'inline-block' }} rounded src='https://memenginy.enginyeriauab.cat/wp-content/uploads/2019/02/LogoRaona-1.png' height=\"170px\" />\n                    <div style={{ display: 'inline-block', verticalAlign: 'middle' }}>\n                        <h1>¡Bienvenidos a Respitron!</h1>\n                        <p>\n                            Usad la barra superior de navegación para consultar las distintas secciones de nuestra compañía\n                        </p>\n                    </div>\n                </Jumbotron>\n                {\n                    carouselItemImages.length > 1 ?\n                        <RespiCarousel carouselItemImages={carouselItemImages} /> :\n                        <img alt={carouselItemImages[0].alt} src={carouselItemImages[0].src} className={carouselItemImages[0].className} />\n                }\n            </>\n        );\n    }\n}","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Patient from '../entities/patient';\n\nexport interface RespiTableProps {\n    headers: string[];\n    rows?: Patient[];\n}\n\nexport default class RespiTable extends React.Component<RespiTableProps, {}> {\n    public render() {\n        let { headers, rows } = this.props;\n\n        return (\n            <Table>\n                {\n                    headers.length > 0 &&\n                    <thead>\n                        <tr>\n                            {\n                                headers.map(header => {\n                                    return <th key={header}>{header}</th>\n                                })\n                            }\n                        </tr>\n                    </thead>\n                }\n                {\n                    rows && rows.length > 0 &&\n                    <tbody>\n                        {\n                            rows.map((row: Patient, index) => {\n                                return <tr key={index}>\n                                    {\n                                        Object.values(row).length > 0 && Object.values(row).map((column, index) => {\n                                            return <td key={index}>{column !== null && column.toString()}</td>\n                                        })\n                                    }\n                                </tr>\n                            })\n                        }\n                    </tbody>\n                }\n            </Table>\n        );\n    }\n}","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport BaseBody from './bodies/baseBody';\nimport Patient from '../../entities/patient';\n\nexport interface ModalDialogProps {\n    title: string;\n    body: JSX.Element;\n    show: boolean;\n    bodyRef: React.RefObject<BaseBody>;\n    onClose(addedPatient?: Patient): void;\n}\n\nexport interface ModalDialogState {\n\n}\n\nexport default class ModalDialog extends React.Component<ModalDialogProps, ModalDialogState> {\n    onSaveClick = () => {\n        let { bodyRef } = this.props;\n\n        if(bodyRef.current) {\n            let addedPatient = bodyRef.current.save();\n            this.props.onClose(addedPatient);\n        }\n    }\n    \n    public render() {\n        let { title, body, show, onClose } = this.props;\n\n        return (\n            <Modal show={show} onHide={onClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {\n                        body\n                    }\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => onClose}>Cancelar</Button>\n                    <Button variant=\"primary\" onClick={this.onSaveClick}>Guardar</Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}","import React from 'react';\nimport Form from 'react-bootstrap/Form';\n\nexport interface FormGroupProps {\n    labelText: string;\n}\n\nexport default class FormGroup extends React.Component<FormGroupProps, {}> {\n    public render() {\n        let { labelText } = this.props;\n\n        return (\n            <Form.Group>\n                <Form.Label>{labelText}</Form.Label>\n                {\n                    this.props.children\n                }\n            </Form.Group>\n        );\n    }\n}","import City from '../entities/city';\n\nexport default class PatientService {\n    public static async getCities(): Promise<City[]> {\n        // return Axios.get<any>(`${appConstants.apiBaseUrl}${patientServiceConstants.getAllPatientsEndpoint}`);\n        let patientsImport = await import('../constants/cities');\n\n        return patientsImport.default;\n    }\n}","import React from 'react';\nimport BaseBody from './baseBody';\nimport Patient from \"../../../entities/patient\";\nimport City from '../../../entities/city';\nimport Form from 'react-bootstrap/Form';\nimport { ReplaceProps, BsPrefixProps } from 'react-bootstrap/helpers';\nimport { FormControlProps } from 'react-bootstrap/FormControl';\nimport FormGroup from '../../formGroup';\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport CityService from '../../../services/cityService';\nimport 'react-day-picker/lib/style.css';\n\nexport interface AddPatientBodyState {\n    patient: Patient;\n    cities: City[];\n}\n\nexport default class AddPatientBody extends React.Component<{}, AddPatientBodyState> implements BaseBody {\n    state = {\n        patient: {\n            Id: 0,\n            Name: '',\n            Surname: '',\n            Gender: null,\n            GenderId: 1,\n            DateOfBirth: new Date().toISOString(),\n            DateOfDecease: '',\n            Smoker: false,\n            CigarrettesDailyConsumption: 0,\n            City: null,\n            CityId: 1\n        },\n        cities: [\n            {\n                Id: 0,\n                Name: ''\n            }\n        ]\n    }\n\n    async componentDidMount() {\n        let cities = await CityService.getCities();\n\n        this.setState({\n            cities: cities\n        });\n    }\n\n    save = (): Patient => {\n        return this.state.patient;\n    }\n\n    private onNameChange = (event: React.FormEvent<ReplaceProps<React.ElementType<HTMLInputElement>, BsPrefixProps<React.ElementType<HTMLInputElement>> & FormControlProps>>) => {\n        let patient = this.state.patient;\n        patient.Name = event.currentTarget.value ? event.currentTarget.value : '';\n        this.setState({\n            patient: patient\n        });\n    }\n\n    private onSurnameChange = (event: React.FormEvent<ReplaceProps<React.ElementType<HTMLInputElement>, BsPrefixProps<React.ElementType<HTMLInputElement>> & FormControlProps>>) => {\n        let patient = this.state.patient;\n        patient.Surname = event.currentTarget.value ? event.currentTarget.value : '';\n        this.setState({\n            patient: patient\n        });\n    }\n\n    private onGenderChange = (event: React.FormEvent<ReplaceProps<React.ElementType<HTMLSelectElement>, BsPrefixProps<React.ElementType<HTMLSelectElement>> & FormControlProps>>) => {\n        let patient = this.state.patient;\n        patient.GenderId = parseInt(event.currentTarget.selectedOptions[0].attributes.getNamedItem('data-id')!.value);\n        this.setState({\n            patient: patient\n        });\n    }\n\n    private onBirthDateChange = (date: Date, modifiers: Object, dayPickerInput: DayPickerInput) => {\n        let patient = this.state.patient;\n        if (date) {\n            patient.DateOfBirth = date.toISOString();\n            this.setState({\n                patient: patient\n            });\n        }\n    }\n\n    private onDeceaseDateChange = (date: Date, modifiers: Object, dayPickerInput: DayPickerInput) => {\n        let patient = this.state.patient;\n        if (date) {\n            patient.DateOfDecease = date.toISOString();\n            this.setState({\n                patient: patient\n            });\n        }\n    }\n\n    private onSmokerChange = (event: React.FormEvent<ReplaceProps<React.ElementType<HTMLSelectElement>, BsPrefixProps<React.ElementType<HTMLSelectElement>> & FormControlProps>>) => {\n        let patient = this.state.patient;\n        patient.Smoker = event.currentTarget.selectedOptions[0].attributes.getNamedItem('data-id')!.value === 'true' ? true : false;\n        this.setState({\n            patient: patient\n        });\n    }\n\n    private onDailyCigarrettesChange = (event: React.FormEvent<ReplaceProps<React.ElementType<HTMLInputElement>, BsPrefixProps<React.ElementType<HTMLInputElement>> & FormControlProps>>) => {\n        let patient = this.state.patient;\n        patient.CigarrettesDailyConsumption = event.currentTarget.value ? parseInt(event.currentTarget.value) : 0;\n        this.setState({\n            patient: patient\n        });\n    }\n\n    private onCityChange = (event: React.FormEvent<ReplaceProps<React.ElementType<HTMLSelectElement>, BsPrefixProps<React.ElementType<HTMLSelectElement>> & FormControlProps>>) => {\n        let patient = this.state.patient;\n        patient.CityId = parseInt(event.currentTarget.selectedOptions[0].attributes.getNamedItem('data-id')!.value)\n        this.setState({\n            patient: patient\n        });\n    }\n\n    public render() {\n        let { patient, cities } = this.state;\n\n        return (\n            <Form>\n                <FormGroup labelText='Nombre'>\n                    <Form.Control as='input' type='text' onChange={this.onNameChange} />\n                </FormGroup>\n                <FormGroup labelText='Apellidos'>\n                    <Form.Control as='input' type='text' onChange={this.onSurnameChange} />\n                </FormGroup>\n                <FormGroup labelText='Género'>\n                    <Form.Control as='select' onChange={this.onGenderChange}>\n                        <option data-id={2}>Masculino</option>\n                        <option data-id={1}>Femenino</option>\n                        <option data-id={3}>Otro</option>\n                    </Form.Control>\n                </FormGroup>\n                <FormGroup labelText='Fecha de nacimiento'>\n                    <DayPickerInput onDayChange={this.onBirthDateChange}\n                        value={patient.DateOfBirth && new Date(patient.DateOfBirth)}\n                        format='DD/MM/YYYY' />\n                </FormGroup>\n                <FormGroup labelText='Fecha de fallecimiento'>\n                    <DayPickerInput onDayChange={this.onDeceaseDateChange}\n                        value={patient.DateOfDecease && new Date(patient.DateOfDecease)}\n                        format='DD/MM/YYYY' />\n                </FormGroup>\n                <FormGroup labelText='¿Fumador?'>\n                    <Form.Control as='select' onChange={this.onSmokerChange} value='No'>\n                        <option data-id={true}>Sí</option>\n                        <option data-id={false}>No</option>\n                    </Form.Control>\n                </FormGroup>\n                <FormGroup labelText='Cigarros diaríos'>\n                    <Form.Control disabled={!patient.Smoker} as='input' type='number' onChange={this.onDailyCigarrettesChange} />\n                </FormGroup>\n                <FormGroup labelText='Ciudad'>\n                    <Form.Control as='select' onChange={this.onCityChange}>\n                        {\n                            cities.length > 0 && cities.map(city => {\n                                return <option data-id={city.Id}>{city.Name}</option>\n                            })\n                        }\n                    </Form.Control>\n                </FormGroup>\n            </Form>\n        );\n    }\n}","import Patient from '../entities/patient';\n\nexport default class PatientService {\n    public static async getPatients(): Promise<Patient[]> {\n        // return Axios.get<any>(`${appConstants.apiBaseUrl}${patientServiceConstants.getAllPatientsEndpoint}`);\n        let patientsImport = await import('../constants/patients');\n\n        return patientsImport.default;\n    }\n}","import React from \"react\";\nimport Patient from '../entities/patient';\nimport RespiTable from '../common/respiTable';\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Button from \"react-bootstrap/Button\";\nimport ModalDialog from '../common/modalDialog/modalDialog';\nimport AddPatientBody from '../common/modalDialog/bodies/addPatientBody';\nimport PatientService from '../services/patientService';\n\nexport interface PatientsState {\n    patients: Patient[];\n    showModal: boolean;\n}\n\nexport default class Patients extends React.Component<{}, PatientsState> {\n    private bodyRef = React.createRef<AddPatientBody>();\n    state = {\n        patients: [],\n        showModal: false\n    };\n\n    async componentDidMount() {\n        // let patients = await PatientService.getPatients();\n        let patients = await PatientService.getPatients();\n\n        this.setState({\n            patients: patients\n        });\n    }\n\n    private onAddPatientRow = () => {\n        this.setState({\n            showModal: true\n        });\n    }\n\n    private onModalDialogClose = (addedPatient?: Patient) => {\n        let patients = this.state.patients as Patient[];\n        if (addedPatient) {\n            let lastId = Math.max.apply(Math, patients.map(patient => { return patient.Id }));\n            addedPatient.Id = lastId + 1;\n            patients.push(addedPatient);\n        }\n\n        this.setState({\n            showModal: false,\n            patients: patients\n        });\n    }\n\n    public render() {\n        let { patients, showModal } = this.state;\n\n        return (\n            <>\n                <Jumbotron>\n                    <div style={{ display: 'inline-block', verticalAlign: 'middle' }}>\n                        <h1>Pacientes</h1>\n                        <p>\n                            Desde esta página podréis consultar y dar de alta pacientes en el sistema\n                        </p>\n                        <Button variant='primary' onClick={this.onAddPatientRow}>Añadir registro</Button>\n                    </div>\n                </Jumbotron>\n                {\n                    patients.length && <RespiTable headers={Object.keys(patients[0])} rows={patients} />\n                }\n                <ModalDialog show={showModal} body={<AddPatientBody ref={this.bodyRef} />} title='Añadir paciente' onClose={this.onModalDialogClose} bodyRef={this.bodyRef} />\n            </>\n        );\n    }\n}","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport respiNavItem from \"../../entities/respiNavItem\";\n\nexport interface navbarItemProps {\n    navbarItem: respiNavItem;\n}\n\nexport default class NavbarItem extends React.Component<navbarItemProps, {}> {\n    public render() {\n        let { navbarItem } = this.props;\n\n        return (\n            <Nav.Item>\n                <Nav.Link eventKey={navbarItem.key}>{navbarItem.title}</Nav.Link>\n            </Nav.Item>\n        );\n    }\n}","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport respiNavItem from '../../entities/respiNavItem';\nimport NavbarItem from './navbarItem';\n\nexport interface respiNavbarProps {\n    respiNavItems: respiNavItem[];\n    defaultActiveKey?: string;\n    handleNavBarSelect?(eventKey: string): void;\n}\n\nexport default class RespiNavbar extends React.Component<respiNavbarProps, {}> {\n    public render() {\n        let { handleNavBarSelect, respiNavItems, defaultActiveKey } = this.props;\n\n        return (\n            <Navbar bg='light' expand='lg'>\n                <Navbar.Brand>Respitron</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\" onSelect={handleNavBarSelect} defaultActiveKey={defaultActiveKey}>\n                        {\n                            respiNavItems.map(item => {\n                                return <NavbarItem navbarItem={item} key={item.key} />\n                            })\n                        }\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n}","import respiNavItem from \"../entities/respiNavItem\";\n\nconst respiNavItems: respiNavItem[] = [\n  {\n    title: 'Home',\n    key: 'home'\n  },\n  {\n    title: 'Patients',\n    key: 'patients'\n  }\n];\n\nexport default respiNavItems;","import React from 'react';\nimport Home from './home/home';\nimport Patients from './patients/patients';\nimport RespiNavbar from './common/navbar/respiNavbar';\nimport respiNavItems from './constants/respiNavItems';\n\nexport interface AppState {\n\tcurrentView: JSX.Element;\n}\n\nclass App extends React.Component<{}, AppState> {\n\tstate = {\n\t\tcurrentView: <Home />\n\t};\n\n\thandleNavbarSelect = (eventKey: string) => {\n\t\tlet view: JSX.Element | undefined = undefined;\n\n\t\tswitch (eventKey) {\n\t\t\tcase 'home':\n\t\t\t\tview = <Home />;\n\t\t\t\tbreak;\n\n\t\t\tcase 'patients':\n\t\t\t\tview = <Patients />\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis.setState({\n\t\t\tcurrentView: view!\n\t\t});\n\t}\n\n\tpublic render() {\n\t\tlet { currentView } = this.state;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<RespiNavbar handleNavBarSelect={this.handleNavbarSelect} respiNavItems={respiNavItems} defaultActiveKey={respiNavItems[0].key}></RespiNavbar>\n\t\t\t\t{currentView}\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}